name: Deploy Lambda Dev Manual

on:
  workflow_dispatch:
      
jobs:

  CI:
    name: Runner
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 14.x # used for installing the serverless-python-requirements dependency from NPM
    strategy:
      matrix:
        python-version:
          - 3.7 # with a build matrix, you can specify a list of python versions to deploy with
        


    steps:
            # --------- use Python to install Python dependencies and run linter, tests, etc. ---------
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      #-------- Set VAR name
      - name: Set var name service Lambda
        run:  echo "NAME_REPOSITORY_CUSTOM=$(echo ${{ github.repository }} | cut -c 11-90)" >> $GITHUB_ENV         

      - name: Echo var name service Lambda
        run:  echo ${{ env.NAME_REPOSITORY_CUSTOM }}


      # --------- Use Node and NPM to install serverless-python-requirements ---------
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node dependencies (specifically, serverless-python-requirements)
        run: npm install
        


      - name: Check File List        
        run:  |
         ls -l
         pwd     

      - name: Serverless Deploy
        uses: dhollerbach/github-action-serverless-with-python-requirements@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 



       
